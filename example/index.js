// Generated by CoffeeScript 1.10.0
(function() {
  var create, createGui, emitter, emitterMethods, extend, game, gui, preload, render, shutdown;

  extend = Phaser.Utils.extend;

  emitterMethods = {
    explodeWithMaxParticles: function() {
      return this.explode(this.lifespan, this.maxParticles);
    },
    flowWithDefaultArgs: function() {
      return this.flow();
    },
    flowWithQuantity: function() {
      return this.flow(this.lifespan, this.frequency, 10);
    },
    startFlow: function() {
      return this.start(false, this.lifespan, this.frequency);
    },
    startForceQuantity: function() {
      return this.start(false, this.lifespan, this.frequency, this.maxParticles, true);
    }
  };

  emitter = null;

  gui = null;

  preload = function() {
    game.load.baseURL = 'http://examples.phaser.io/assets/';
    game.load.crossOrigin = 'anonymous';
    game.load.image('bubble', 'particles/bubble.png');
    game.load.image('water', 'skies/sunset.png');
  };

  create = function() {
    var debug;
    debug = game.debug;
    debug.font = '16px monospace';
    debug.lineHeight = 25;
    game.add.image(0, 0, 'water');
    emitter = game.add.emitter(game.world.centerX, 200, 100);
    emitter.name = 'bubbles';
    emitter.width = 400;
    emitter.height = 64;
    emitter.makeParticles('bubble');
    emitter.minParticleSpeed.set(0, 300);
    emitter.maxParticleSpeed.set(0, 400);
    emitter.setRotation(0, 0);
    emitter.setAlpha(0.3, 0.8);
    emitter.setScale(0.5, 0.5, 1, 1);
    emitter.gravity = -200;
    emitter.flow(emitter.lifespan, emitter.frequency);
    extend(emitter, emitterMethods);
    createGui();
  };

  shutdown = function() {
    gui.destroy();
  };

  render = function() {
    game.debug.emitter(emitter);
    game.debug.emitterInfo(emitter, 20, 20);
    game.debug.emitterTotal(emitter, 0, 580, game.width, 20);
  };

  createGui = function() {
    var method, methodName, world;
    gui = new dat.GUI({
      width: 400
    });
    world = emitter.game.world;
    gui.add(emitter, "flow");
    gui.add(emitter, "kill");
    gui.add(emitter, "removeAll");
    gui.add(emitter, "revive");
    for (methodName in emitterMethods) {
      method = emitterMethods[methodName];
      gui.add(emitter, methodName);
    }
    gui.add(emitter, "emitX", world.left, world.right, 10).listen();
    gui.add(emitter, "emitY", world.top, world.bottom, 10).listen();
    gui.add(emitter, "exists").listen();
    gui.add(emitter, "frequency", 0, 1000, 50).listen();
    gui.add(emitter, "height", 0, world.height, 10).listen();
    gui.add(emitter, "lifespan", 0, 10000, 1000).listen();
    gui.add(emitter, "on").listen();
    gui.add(emitter, "visible").listen();
    gui.add(emitter, "width", 0, world.width, 10).listen();
    gui.add(emitter, "x").listen();
    gui.add(emitter, "y").listen();
  };

  game = new Phaser.Game(800, 600, Phaser.CANVAS, 'phaser-example', {
    preload: preload,
    create: create,
    render: render
  });

}).call(this);
