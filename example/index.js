// Generated by CoffeeScript 1.10.0
(function() {
  "use strict";
  var Phaser, dat, emitterMethods, extend;

  dat = this.dat, Phaser = this.Phaser;

  extend = Phaser.Utils.extend;

  emitterMethods = {
    explodeWithMaxParticles: function() {
      return this.explode(this.lifespan, this.maxParticles);
    },
    flowWithDefaultArgs: function() {
      return this.flow();
    },
    flowWithQuantity: function() {
      return this.flow(this.lifespan, this.frequency, 10);
    },
    startFlow: function() {
      return this.start(false, this.lifespan, this.frequency);
    },
    startForceQuantity: function() {
      return this.start(false, this.lifespan, this.frequency, this.maxParticles, true);
    }
  };

  window.GAME = new Phaser.Game({
    antialias: false,
    renderer: Phaser.CANVAS,
    state: {
      init: function() {
        var debug;
        debug = this.game.debug;
        debug.font = '14px monospace';
        debug.lineHeight = 20;
      },
      preload: function() {
        this.load.baseURL = 'http://examples.phaser.io/assets/';
        this.load.crossOrigin = 'anonymous';
        this.load.image('bubble', 'particles/bubble.png');
        this.load.image('bg', 'skies/cavern2.png');
      },
      create: function() {
        this.add.image(0, 0, 'bg');
        this.emitter = this.add.emitter(this.world.centerX, 200, 100);
        this.emitter.name = 'bubbles';
        this.emitter.width = 400;
        this.emitter.height = 64;
        this.emitter.makeParticles('bubble');
        this.emitter.minParticleSpeed.set(0, 300);
        this.emitter.maxParticleSpeed.set(0, 400);
        this.emitter.setRotation(0, 0);
        this.emitter.setAlpha(0.3, 0.8);
        this.emitter.setScale(0.5, 0.5, 1, 1);
        this.emitter.gravity = -200;
        this.emitter.flow(this.emitter.lifespan, this.emitter.frequency);
        extend(this.emitter, emitterMethods);
        this.gui = this.createGui(this.emitter);
      },
      render: function() {
        var debug;
        debug = this.game.debug;
        debug.emitter(this.emitter);
        debug.emitterInfo(this.emitter, 20, 40);
        debug.emitterTotal(this.emitter, 0, 580, this.game.width, 20);
        this.debugText("game.debug.emitter(emitter)", this.emitter.left, -5 + this.emitter.top);
        this.debugText("game.debug.emitterInfo(emitter, x, y)", 10, 20);
        this.debugText("game.debug.emitterTotal(emitter, x, y)", 10, 560);
      },
      shutdown: function() {
        this.gui.destroy();
      },
      createGui: function(emitter) {
        var gui, i, len, methodName, ref, world;
        world = this.game.world;
        gui = new dat.GUI({
          width: 400
        });
        gui.add(emitter, "flow");
        gui.add(emitter, "kill");
        gui.add(emitter, "removeAll");
        gui.add(emitter, "revive");
        ref = Object.keys(emitterMethods);
        for (i = 0, len = ref.length; i < len; i++) {
          methodName = ref[i];
          gui.add(emitter, methodName);
        }
        gui.add(emitter, "emitX", world.left, world.right, 10).listen();
        gui.add(emitter, "emitY", world.top, world.bottom, 10).listen();
        gui.add(emitter, "exists").listen();
        gui.add(emitter, "frequency", 0, 1000, 50).listen();
        gui.add(emitter, "height", 0, world.height, 10).listen();
        gui.add(emitter, "lifespan", 0, 10000, 1000).listen();
        gui.add(emitter, "on").listen();
        gui.add(emitter, "visible").listen();
        gui.add(emitter, "width", 0, world.width, 10).listen();
        gui.add(emitter, "x").listen();
        gui.add(emitter, "y").listen();
        return gui;
      },
      debugText: function(text, x, y, color) {
        if (color == null) {
          color = '#999';
        }
        this.game.debug.text(text, x, y, color, this.game.debug.font);
      }
    }
  });

}).call(this);
