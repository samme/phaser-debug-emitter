// Generated by CoffeeScript 1.10.0
(function() {
  var COLOR_LENGTH, COLOR_OFF, COLOR_ON, KEYS, KEYS_LONG, Phaser, _areaRect, _lengthRect, _totalRect, emitterColor, isArray, stringValueForKey;

  Phaser = this.Phaser;

  isArray = Array.isArray;

  COLOR_LENGTH = 'rgba(127,127,127,0.4)';

  COLOR_OFF = 'rgba(255,0,0,0.4)';

  COLOR_ON = 'rgba(0,255,0,0.4)';

  KEYS = ["area", "emitX", "emitY", "exists", "frequency", "length", "lifespan", "maxParticles", "name", "on", "total", "visible", "_counter", "_explode", "_flowQuantity", "_flowTotal", "_frames", "_id", "_quantity", "_timer"];

  KEYS_LONG = ["alive", "alphaData", "angularDrag", "area", "autoAlpha", "autoScale", "bounce", "emitX", "emitY", "exists", "frequency", "gravity", "lifespan", "maxParticleAlpha", "maxParticles", "maxParticleScale", "maxParticleSpeed", "maxRotation", "minParticleAlpha", "minParticleScale", "minParticleSpeed", "minRotation", "name", "on", "particleAnchor", "particleBringToTop", "particleClass", "particleDrag", "particleSendToBack", "scaleData", "visible", "_counter", "_explode", "_flowQuantity", "_flowTotal", "_frames", "_id", "_maxParticleScale", "_minParticleScale", "_quantity", "_timer"];

  emitterColor = function(emitter) {
    if (emitter.on) {
      return COLOR_ON;
    } else {
      return COLOR_OFF;
    }
  };

  stringValueForKey = function(key, emitter) {
    var ref, typ, val;
    val = emitter[key];
    typ = typeof val;
    switch (false) {
      case !isArray(val):
        val = "(" + val.length + ")";
        break;
      case typ !== "number":
        val = val % 1 ? val.toFixed(1) : val;
        break;
      case !(val != null ? (ref = val.constructor) != null ? ref.name : void 0 : void 0):
        val.constructor.name;
        break;
      case typeof val !== "function":
        "[Function]";
        break;
      case !(val != null ? val.toString : void 0):
        val = val.toString();
    }
    return val;
  };

  _areaRect = new Phaser.Rectangle;

  Phaser.Utils.Debug.prototype.emitter = function(emitter, color, filled) {
    var debug;
    if (filled == null) {
      filled = true;
    }
    debug = this.game.debug;
    if (color == null) {
      color = emitterColor(emitter);
    }
    if (emitter.width > 1 || emitter.height > 1) {
      _areaRect.setTo(emitter.left, emitter.top, emitter.width, emitter.height);
      debug.geom(_areaRect, color, filled);
    }
    debug.pixel(emitter.emitX, emitter.emitY, color);
  };

  Phaser.Utils.Debug.prototype.emitterInfo = function(emitter, x, y, color, long) {
    var debug, i, key, len, ref;
    if (long == null) {
      long = false;
    }
    debug = this.game.debug;
    debug.start(x, y, color);
    debug.line(emitter.name);
    ref = (long ? KEYS_LONG : KEYS);
    for (i = 0, len = ref.length; i < len; i++) {
      key = ref[i];
      debug.line(key + ": " + (stringValueForKey(key, emitter)));
    }
    debug.stop();
  };

  _lengthRect = new Phaser.Rectangle;

  _totalRect = new Phaser.Rectangle;

  Phaser.Utils.Debug.prototype.emitterTotal = function(emitter, x, y, width, height, color, label) {
    var debug, length, total;
    if (width == null) {
      width = 100;
    }
    if (height == null) {
      height = 10;
    }
    if (label == null) {
      label = emitter.name;
    }
    debug = this.game.debug;
    length = emitter.length, total = emitter.total;
    if (color == null) {
      color = emitterColor(emitter);
    }
    _lengthRect.setTo(x, y, ~~width, height);
    debug.geom(_lengthRect, COLOR_LENGTH);
    _totalRect.setTo(x, y, ~~(width * total / length), height);
    debug.geom(_totalRect, color);
    if (label) {
      debug.text(label, x, y + ~~(debug.lineHeight / 2));
    }
  };

}).call(this);
